# IdleOn Efficiency Cursor Rules

## Primary Context
ALWAYS reference `docs/CODEBASE_OVERVIEW.md` when working on this codebase. This document contains critical information about:
- Technical architecture and constraints
- Development workflow and testing procedures
- File structure and immutable directories
- External dependencies and data sources

## Critical Constraints

### DO NOT MODIFY These Directories (Auto-Generated from WikBot):
- `data/domain/data/` - Game data repositories
- `data/domain/enum/` - Game enumerations  
- `data/domain/model/` - TypeScript models

### Technology Requirements:
- Always use TypeScript for new code
- Use NextJS App Router architecture for new pages
- Use Yarn (never npm) for package management
- We are forced to use Grommet UI elements for the time being
- Follow the domain-driven design pattern in `data/domain/`

### Development Process:
- This is a reverse-engineering project for the idle MMO "Legends of Idleon"
- Game mechanics must be visually verified against the actual running game
- Never guess or assume game calculations - always verify
- Data sync from external WikBot project using: `cp -r ../IdleonWikiBot/exported/ts/* data/domain/`

### Architecture Understanding:
- Each game system has its own domain class
- Data flow: Game save → Parse → Calculate cross-impacts → Display  
- Real-time Firebase integration for user data
- Complex post-processing pipeline for interdependent calculations

## **TESTING REQUIREMENTS** 

### **Always Incorporate Tests When Working on Domains**

When working on any game domain (`data/domain/*.tsx`), testing is **mandatory**:

#### **For Existing Domains (with save data available):**

1. **Snapshot Testing Approach**:
   ```bash
   # 1. Create snapshot generation script
   cp scripts/generate-alchemy-snapshot.ts scripts/generate-[domain]-snapshot.ts
   
   # 2. Customize for domain's key calculation methods
   # 3. Generate expected results
   npx ts-node --project scripts/tsconfig.json scripts/generate-[domain]-snapshot.ts save-name
   
   # 4. Create domain test file
   cp __tests__/domains/_domain-template.test.ts __tests__/domains/[domain]-calculations.test.ts
   
   # 5. Verify all tests pass
   yarn test __tests__/domains/[domain]-calculations.test.ts
   ```

2. **Key Methods to Test**:
   - Primary calculation methods (`getBonus()`, `getCost()`, etc.)
   - Aggregate functions (`getBonusForKey()`, `getTotal*()`)
   - Special cases and conditional logic
   - Cross-domain parameter dependencies

#### **For New Domains (test-driven development):**

1. **Start with Structure Tests**:
   - Data loading and basic validation
   - Method existence and return types
   - Required properties and structure

2. **Add Calculation Tests**:
   - Use known expected values from game verification
   - Test edge cases and boundary conditions
   - Build domain implementation to pass tests

3. **Generate Snapshots Later**:
   - Once domain is working, create snapshot script
   - Generate comprehensive baseline data
   - Switch to snapshot-based regression testing

#### **Testing Infrastructure Usage**:

- **Scripts Configuration**: Use `scripts/tsconfig.json` for TypeScript scripts
- **Test Utilities**: Use `__tests__/utils/calculation-helpers.ts` for precise comparisons
- **Browser Mocking**: All scripts must mock browser APIs for Node.js execution
- **Expected Results**: Store in `__tests__/fixtures/expected-results/[domain]/[save-name].json`

#### **Test Requirements**:

1. **Explicit Failure**: Tests must throw errors when expected data is missing
2. **Tolerance Testing**: Use `expectCalculationToMatch()` with 5% tolerance for calculations
3. **Comprehensive Coverage**: Test both individual and aggregate calculations
4. **Real Data**: Use snapshot-generated data, not manual ranges or guesses

### **Testing Rules Summary**:

- ✅ **DO**: Create snapshot scripts for calculation testing
- ✅ **DO**: Test key calculation methods with real expected values
- ✅ **DO**: Verify generated snapshots match the actual game
- ✅ **DO**: Use test-driven development for new domains
- ❌ **DON'T**: Skip testing when working on domain logic
- ❌ **DON'T**: Use arbitrary ranges or structure-only validation
- ❌ **DON'T**: Guess at expected calculation results

**Reference**: See `docs/TESTING_IMPLEMENTATION_PLAN_REVISED.md` for complete implementation details.

## When Working on Features:
1. Check if it involves any auto-generated files (don't modify them)
2. Understand which game system/world the feature belongs to
3. Follow the established domain pattern
4. **ALWAYS add appropriate tests (see Testing Requirements above)**
5. Plan for visual verification against the game
6. Consider cross-system impacts in calculations

## Questions to Ask Before Changes:
- Does this modify any auto-generated WikBot files?
- **What calculation methods need testing and how will I generate expected results?**
- How will this be tested against the actual game?
- Are there cross-system dependencies to consider?
- Does this follow the established domain architecture?

Always reference the full technical overview in `docs/CODEBASE_OVERVIEW.md` for comprehensive context. 