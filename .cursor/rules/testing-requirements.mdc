---
description: 
globs: domain/**
alwaysApply: false
---
# Testing Requirements

## Always Incorporate Tests When Working on Domains

When working on any game domain (`data/domain/*.tsx`), testing is **mandatory**:

### For Existing Domains (with save data available):

1. **Snapshot Testing Approach**:
   ```bash
   # 1. Create snapshot generation script
   cp scripts/generate-alchemy-snapshot.ts scripts/generate-[domain]-snapshot.ts
   
   # 2. Customize for domain's key calculation methods
   # 3. Generate expected results
   npx ts-node --project scripts/tsconfig.json scripts/generate-[domain]-snapshot.ts save-name
   
   # 4. Create domain test file
   cp __tests__/domains/_domain-template.test.ts __tests__/domains/[domain]-calculations.test.ts
   
   # 5. Verify all tests pass
   yarn test __tests__/domains/[domain]-calculations.test.ts
   ```

2. **Key Methods to Test**:
   - Primary calculation methods (`getBonus()`, `getCost()`, etc.)
   - Aggregate functions (`getBonusForKey()`, `getTotal*()`)
   - Special cases and conditional logic
   - Cross-domain parameter dependencies

### For New Domains (test-driven development):

1. **Start with Structure Tests**:
   - Data loading and basic validation
   - Method existence and return types
   - Required properties and structure

2. **Add Calculation Tests**:
   - Use known expected values from game verification
   - Test edge cases and boundary conditions
   - Build domain implementation to pass tests

3. **Generate Snapshots Later**:
   - Once domain is working, create snapshot script
   - Generate comprehensive baseline data
   - Switch to snapshot-based regression testing

### Testing Infrastructure Usage:

- **Scripts Configuration**: Use `scripts/tsconfig.json` for TypeScript scripts
- **Test Utilities**: Use `__tests__/utils/calculation-helpers.ts` for precise comparisons
- **Browser Mocking**: All scripts must mock browser APIs for Node.js execution
- **Expected Results**: Store in `__tests__/fixtures/expected-results/[domain]/[save-name].json`

### Testing Rules Summary:

- ✅ **DO**: Create snapshot scripts for calculation testing
- ✅ **DO**: Test key calculation methods with real expected values
- ✅ **DO**: Verify generated snapshots match the actual game
- ✅ **DO**: Use test-driven development for new domains
- ❌ **DON'T**: Skip testing when working on domain logic
- ❌ **DON'T**: Use arbitrary ranges or structure-only validation
- ❌ **DON'T**: Guess at expected calculation results

**Reference**: See `docs/TESTING_IMPLEMENTATION_PLAN_REVISED.md` for complete implementation details.

@docs/TESTING_IMPLEMENTATION_PLAN_REVISED.md
@__tests__/utils/calculation-helpers.ts
